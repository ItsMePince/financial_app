// src/pages/income.tsx
// @ts-nocheck
import React, { useEffect, useMemo, useState } from "react";
import "./income.css";
import BottomNav from "./buttomnav";
import {
  // ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  ClipboardList,
  MapPin,
  HandCoins,
  Banknote,
  Bitcoin,
  CalendarDays,

  // ====== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö customincome ======
  // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô & ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
  Gift, Coins, Wallet, Briefcase, Laptop, CreditCard,
  BarChart as BarChart, Clock, ShieldCheck,

  // ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° & ‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå
  UserCheck, BookOpen, Camera, Bike, Car, PenTool, Code,

  // ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô & ‡∏î‡∏≠‡∏Å‡∏ú‡∏•
  PiggyBank, LineChart, FileText, Layers, TrendingUp,

  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ & ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô
  Home as HomeIcon, Bed, Building, Truck, Package,

  // ‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢ & ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
  ShoppingBag, Store, Boxes, Tent, Ticket,

  // ‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå & ‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  Video, Mic, Radio, Music, Film, Gamepad,

  // ‡∏ó‡∏∏‡∏ô/‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
  ClipboardCheck, Trophy, GraduationCap,

  // ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç & ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  Coffee, Star, Gem,

  // Crypto & Digital
  CircuitBoard, Image, Cloud, Lock,

  // Passive
  Link, Megaphone, FileBadge, Users,
} from "lucide-react";
import { useLocation, useNavigate } from "react-router-dom";
import { usePaymentMethod } from "../PaymentMethodContext";

/* ================= Icons (inline SVG) ================= */
const ChevronDown = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="M6 9l6 6 6-6" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);

const IconEtc = ({ active = false }: { active?: boolean }) => (
  <svg viewBox="0 0 24 24" className={`icon ${active ? "icon-active" : ""}`}>
    <circle cx="5" cy="12" r="1.8" />
    <circle cx="12" cy="12" r="1.8" />
    <circle cx="19" cy="12" r="1.8" />
  </svg>
);

const IconBackspace = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="M4 12 9 6h10a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H9L4 12Zm6-3 6 6m0-6-6 6"
      stroke="currentColor" strokeWidth="1.7" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);

const IconCheck = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="m5 12 4 4 10-10" stroke="currentColor" strokeWidth="2.2" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);
/* ===================================================== */

/** ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */
type Category = "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°" | "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" | "‡∏•‡∏á‡∏ó‡∏∏‡∏ô" | "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";

// ‡∏ä‡∏∏‡∏î map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà customincome ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
const ICON_MAP: Record<string, React.FC<any>> = {
  // ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô & ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
  Briefcase, BarChart, Clock, Wallet, ShieldCheck,

  // ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° & ‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå
  Laptop, UserCheck, BookOpen, Camera, Bike, Car, PenTool, Code, Banknote,

  // ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô & ‡∏î‡∏≠‡∏Å‡∏ú‡∏•
  Coins, PiggyBank, LineChart, FileText, Layers, TrendingUp,

  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ & ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô
  Home: HomeIcon, Bed, Building, Truck, Package,

  // ‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢ & ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
  ShoppingBag, Store, Boxes, Tent, CreditCard, Ticket,

  // ‡∏Ñ‡∏£‡∏µ‡πÄ‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå & ‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  Video, Mic, Radio, Music, Film, Gamepad,

  // ‡∏ó‡∏∏‡∏ô/‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
  ClipboardList, ClipboardCheck, Trophy, GraduationCap,

  // ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç & ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  Gift, Coffee, Star, Gem, HandCoins,

  // Crypto & Digital
  Bitcoin, CircuitBoard, Image, Cloud, Lock,

  // Passive
  Link, Megaphone, FileBadge, Users,
};

// üëâ helper: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD (‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ timezone)
const getTodayISO = () => {
  const now = new Date();
  const y = now.getFullYear();
  const m = String(now.getMonth() + 1).padStart(2, "0");
  const d = String(now.getDate()).padStart(2, "0");
  return `${y}-${m}-${d}`;
};

export default function Income() {
  const navigate = useNavigate();
  const location = useLocation();

  // ==== ‡∏î‡∏∂‡∏á/‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Context ====
  const { payment, setPayment } = usePaymentMethod(); // { id, name, favorite?, type? } | null

  // ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
  const [category, setCategory] = useState<Category>("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°");

  // ‚Äú‡∏≠‡∏∑‡πà‡∏ô‡πÜ‚Äù ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å /customincome
  const [customCat, setCustomCat] = useState<{ label: string; icon?: string } | null>(null);

  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  const [amount, setAmount] = useState<string>("0");
  const [note, setNote] = useState<string>("");
  const [place, setPlace] = useState<string>("");

  // Date: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const [date, setDate] = useState<string>(() => getTodayISO());

  // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ expense
  const [menuOpen, setMenuOpen] = useState(false);
  const goExpense = () => navigate("/expense");

  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å customincome (‡πÉ‡∏ä‡πâ router state)
  useEffect(() => {
    const st = location.state as any;
    if (st?.customIncome) {
      setCategory("‡∏≠‡∏∑‡πà‡∏ô‡πÜ");
      setCustomCat({
        label: st.customIncome.label,
        icon: st.customIncome.icon, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô key ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ICON_MAP
      });
      // ‡∏•‡πâ‡∏≤‡∏á state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠ re-render
      navigate(location.pathname, { replace: true, state: null });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.state]);

  // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  const pad = useMemo(
    () => ["1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "0", "‚å´"],
    []
  );

  const onTapKey = (k: string) => {
    if (k === "‚å´") {
      setAmount((a) => (a.length <= 1 ? "0" : a.slice(0, -1)));
      return;
    }
    if (k === ".") {
      setAmount((a) => (a.includes(".") ? a : a + "."));
      return;
    }
    setAmount((a) => (a === "0" ? k : a + k));
  };

  const resetAll = () => {
    setCategory("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°");
    setCustomCat(null);
    setPayment(null); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    setAmount("0");
    setNote("");
    setPlace("");
    setDate(getTodayISO());
    setMenuOpen(false);
  };

  const onConfirm = () => {
    if (!amount || amount === "0" || !note.trim() || !place.trim() || !date) {
      alert("Required ‚ùå");
      return;
    }
    console.log({
      type: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
      category: category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && customCat?.label ? customCat.label : category,
      amount: parseFloat(amount || "0"),
      note,
      place,
      date,
      customIcon: category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? customCat?.icon ?? null : null,
      account: payment ? { id: payment.id, name: payment.name, type: payment.type ?? null } : null,
    });
    alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ");
    resetAll(); // ‚úÖ ‡∏Å‡∏î‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  };

  const formatDate = (iso: string) => {
    try {
      const d = new Date(iso);
      return d.toLocaleDateString("th-TH", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
    } catch {
      return "‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ";
    }
  };

  // ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‚Äú‡∏≠‡∏∑‡πà‡∏ô‡πÜ (custom)‚Äù
  const renderCustomIcon = () => {
    if (!customCat?.icon) return <IconEtc active={category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} />;
    const Cmp = ICON_MAP[customCat.icon];
    if (!Cmp) return <IconEtc active={category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} />;
    return <Cmp className={`icon ${category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? "icon-active" : ""} lucide`} size={20} strokeWidth={2} />;
  };

  return (
    <div className="calc-wrap">
      {/* Header */}
      <header className="topbar"></header>

      {/* Pill: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ + ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ expense */}
      <div className="type-pill" style={{ position: "relative" }}>
        <button className="pill" onClick={() => setMenuOpen((o) => !o)}>
          <span>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</span>
          <ChevronDown />
        </button>

        {menuOpen && (
          <div
            onMouseLeave={() => setMenuOpen(false)}
            style={{
              position: "absolute",
              top: "calc(100% + 8px)",
              left: "50%",
              transform: "translateX(-50%)",
              background: "#fff",
              border: "1px solid rgba(0,0,0,.06)",
              borderRadius: 14,
              boxShadow: "0 10px 20px rgba(0,0,0,.08)",
              padding: 6,
              minWidth: 220,
              zIndex: 20,
            }}
          >
            <button
              onClick={goExpense}
              style={{
                width: "100%",
                textAlign: "center",
                padding: "10px 12px",
                border: 0,
                background: "transparent",
                borderRadius: 10,
                cursor: "pointer",
                fontWeight: 600,
                color: "var(--ink)" as any,
              }}
              onMouseEnter={(e) =>
                (e.currentTarget.style.background = "#f3fbf8")
              }
              onMouseLeave={(e) =>
                (e.currentTarget.style.background = "transparent")
              }
            >
              ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
            </button>
          </div>
        )}
      </div>

      {/* Category row ‚Äî ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */}
      <div className="category-row">
        <button
          className={`cat ${category === "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°" ? "active" : ""}`}
          onClick={() => {
            setCategory("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°");
            setCustomCat(null);
          }}
        >
          <HandCoins className={`icon ${category === "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°" ? "icon-active" : ""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°</span>
        </button>

        <button
          className={`cat ${category === "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" ? "active" : ""}`}
          onClick={() => {
            setCategory("‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
            setCustomCat(null);
          }}
        >
          <Banknote className={`icon ${category === "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" ? "icon-active" : ""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
        </button>

        <button
          className={`cat ${category === "‡∏•‡∏á‡∏ó‡∏∏‡∏ô" ? "active" : ""}`}
          onClick={() => {
            setCategory("‡∏•‡∏á‡∏ó‡∏∏‡∏ô");
            setCustomCat(null);
          }}
        >
          <Bitcoin className={`icon ${category === "‡∏•‡∏á‡∏ó‡∏∏‡∏ô" ? "icon-active" : ""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏•‡∏á‡∏ó‡∏∏‡∏ô</span>
        </button>

        {/* üëá ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ customincome */}
        <button
          className={`cat ${category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? "active" : ""}`}
          onClick={() => {
            setCategory("‡∏≠‡∏∑‡πà‡∏ô‡πÜ");
            navigate("/customincome");
          }}
        >
          {renderCustomIcon()}
          <span>{category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && customCat?.label ? customCat.label : "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"}</span>
        </button>
      </div>

      {/* Amount */}
      <div className="amount">
        <span className="num">{amount}</span>
        <span className="currency">‡∏ø</span>
      </div>

      {/* Segments */}
      <div className="segments" style={{ position: "relative" }}>
        {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
        <label
          className="seg date-seg"
          style={{ position: "relative", display: "inline-flex", alignItems: "center", gap: 6 }}
        >
          <CalendarDays className="icon" size={18} />
          <span>{date ? formatDate(date) : "‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ"}</span>
          <input
            type="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            style={{ position: "absolute", inset: 0, opacity: 0, cursor: "pointer" }}
          />
        </label>

        {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‚Üí AccountSelect */}
        <button
          className="seg"
          onClick={() =>
            navigate("/accountselect", { state: { from: "/income" } })
          }
        >
          {payment ? payment.name : "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
        </button>
      </div>

      {/* Inputs */}
      <div className="inputs">
        <div className="input">
          <ClipboardList size={18} strokeWidth={2} className="icon" />
          <input value={note} onChange={(e) => setNote(e.target.value)} placeholder="‡πÇ‡∏ô‡πâ‡∏ï" />
        </div>
        <div className="input">
          <MapPin size={18} strokeWidth={2} className="icon" />
          <input value={place} onChange={(e) => setPlace(e.target.value)} placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà" />
        </div>
      </div>

      {/* Keypad */}
      <div className="keypad">
        {pad.map((k, i) => (
          <button key={i} className={`key ${k === "‚å´" ? "danger" : ""}`} onClick={() => (k === "‚å´" ? onTapKey("‚å´") : onTapKey(k))}>
            {k === "‚å´" ? <IconBackspace /> : k}
          </button>
        ))}
      </div>

      {/* Confirm */}
      <div className="confirm">
        <button className="ok-btn" onClick={onConfirm}>
          <IconCheck />
        </button>
      </div>

      <BottomNav />
    </div>
  );
}
