// src/pages/SignUp.test.tsx
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import SignUp from "./SignUp";

// -------- helpers --------
function typeIntoForm({
  email = "me@example.com",
  username = "me",
  password = "secret6",
}: { email?: string; username?: string; password?: string }) {
  if (email !== undefined) {
    fireEvent.change(screen.getByLabelText(/email/i), { target: { value: email } });
  }
  if (username !== undefined) {
    fireEvent.change(screen.getByLabelText(/username/i), { target: { value: username } });
  }
  if (password !== undefined) {
    fireEvent.change(screen.getByLabelText(/password/i), { target: { value: password } });
  }
}

function mockFetchOnce(data: any, ok = true) {
  (globalThis.fetch as any) = vi.fn().mockResolvedValueOnce({
    ok,
    json: async () => data,
  } as Response);
}

describe("SignUp (Frontend only)", () => {
  beforeEach(() => {
    vi.restoreAllMocks();
    vi.spyOn(window.localStorage.__proto__, "setItem");
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("à¹€à¸£à¸™à¹€à¸”à¸­à¸£à¹Œà¸Ÿà¸­à¸£à¹Œà¸¡à¹„à¸”à¹‰à¸„à¸£à¸šà¹à¸¥à¸°à¸¡à¸µà¸¥à¸´à¸‡à¸à¹Œ Login", () => {
    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    expect(screen.getByRole("heading", { name: /sign up/i })).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
    const loginLink = screen.getByRole("link", { name: /login/i });
    expect(loginLink).toHaveAttribute("href", "/login");
  });

  it("validate: à¸•à¹‰à¸­à¸‡à¸à¸£à¸­à¸à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹ƒà¸«à¹‰à¸„à¸£à¸šà¸–à¹‰à¸§à¸™", async () => {
    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    fireEvent.click(screen.getByRole("button", { name: /create account/i }));
    expect(await screen.findByText(/à¸à¸£à¸¸à¸“à¸²à¸à¸£à¸­à¸à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹ƒà¸«à¹‰à¸„à¸£à¸šà¸–à¹‰à¸§à¸™/i)).toBeInTheDocument();
  });

  it("validate: à¸£à¸«à¸±à¸ªà¸œà¹ˆà¸²à¸™à¸•à¹‰à¸­à¸‡à¸¢à¸²à¸§à¸­à¸¢à¹ˆà¸²à¸‡à¸™à¹‰à¸­à¸¢ 6 à¸•à¸±à¸§à¸­à¸±à¸à¸©à¸£", async () => {
    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({ email: "a@b.com", username: "abc", password: "12345" });
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));
    expect(await screen.findByText(/à¸£à¸«à¸±à¸ªà¸œà¹ˆà¸²à¸™à¸•à¹‰à¸­à¸‡à¸¡à¸µà¸­à¸¢à¹ˆà¸²à¸‡à¸™à¹‰à¸­à¸¢ 6 à¸•à¸±à¸§à¸­à¸±à¸à¸©à¸£/i)).toBeInTheDocument();
  });

  it("à¹€à¸¡à¸·à¹ˆà¸­à¹€à¸£à¸´à¹ˆà¸¡à¸žà¸´à¸¡à¸žà¹Œà¹ƒà¸«à¸¡à¹ˆà¹à¸¥à¹‰à¸§ error à¹€à¸”à¸´à¸¡à¸–à¸¹à¸à¸¥à¹‰à¸²à¸‡", async () => {
    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    fireEvent.click(screen.getByRole("button", { name: /create account/i }));
    expect(await screen.findByText(/à¸à¸£à¸¸à¸“à¸²à¸à¸£à¸­à¸à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹ƒà¸«à¹‰à¸„à¸£à¸šà¸–à¹‰à¸§à¸™/i)).toBeInTheDocument();

    fireEvent.change(screen.getByLabelText(/email/i), { target: { value: "me@x.com" } });
    expect(screen.queryByText(/à¸à¸£à¸¸à¸“à¸²à¸à¸£à¸­à¸à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹ƒà¸«à¹‰à¸„à¸£à¸šà¸–à¹‰à¸§à¸™/i)).not.toBeInTheDocument();
  });

  it("loading: à¸›à¸¸à¹ˆà¸¡à¹à¸¥à¸°à¸Šà¹ˆà¸­à¸‡à¸à¸£à¸­à¸à¸–à¸¹à¸ disabled à¸£à¸°à¸«à¸§à¹ˆà¸²à¸‡à¸ªà¹ˆà¸‡à¸‚à¹‰à¸­à¸¡à¸¹à¸¥", async () => {
    mockFetchOnce({ success: false, message: "x" });

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({});
    const submit = screen.getByRole("button", { name: /create account/i });

    fireEvent.click(submit);
    expect(submit).toBeDisabled();
    expect(submit).toHaveTextContent(/à¸à¸³à¸¥à¸±à¸‡à¸ªà¸¡à¸±à¸„à¸£à¸ªà¸¡à¸²à¸Šà¸´à¸/i);

    await waitFor(() => {
      expect(submit).not.toBeDisabled();
      expect(submit).toHaveTextContent(/create account/i);
    });
  });

  it("à¹€à¸ªà¹‰à¸™à¸—à¸²à¸‡ onSubmit prop: à¹€à¸£à¸µà¸¢à¸ callback à¸”à¹‰à¸§à¸¢à¸„à¹ˆà¸²à¸Ÿà¸­à¸£à¹Œà¸¡ à¹à¸¥à¸°à¹„à¸¡à¹ˆà¹€à¸£à¸µà¸¢à¸ fetch", async () => {
    const onSubmit = vi.fn();
    (globalThis.fetch as any) = vi.fn();

    render(
      <MemoryRouter>
        <SignUp onSubmit={onSubmit} />
      </MemoryRouter>
    );

    typeIntoForm({ email: "me@x.com", username: "me", password: "secret6" });
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    await waitFor(() => {
      expect(onSubmit).toHaveBeenCalledWith({
        email: "me@x.com",
        username: "me",
        password: "secret6",
      });
    });

    expect(globalThis.fetch as any).not.toHaveBeenCalled();
  });

  it("à¹€à¸£à¸µà¸¢à¸ fetch à¸”à¹‰à¸§à¸¢à¸žà¸²à¸£à¸²à¸¡à¸´à¹€à¸•à¸­à¸£à¹Œà¸—à¸µà¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡à¹€à¸¡à¸·à¹ˆà¸­à¹„à¸¡à¹ˆà¸¡à¸µ onSubmit prop", async () => {
    mockFetchOnce({ success: false, message: "x" });

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({ email: "a@b.com", username: "abc", password: "secret6" });
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    await waitFor(() => expect(globalThis.fetch as any).toHaveBeenCalled());

    const fetchMock = globalThis.fetch as unknown as { mock: { calls: any[] } };
    const [url, init] = fetchMock.mock.calls[0] as [string, RequestInit];
    expect(url).toBe("/api/api/auth/signup");
    expect(init.method).toBe("POST");

    const contentType = new Headers(init.headers as HeadersInit).get("Content-Type");
    expect(contentType).toBe("application/json");

    const bodyObj = JSON.parse(String(init.body));
    expect(bodyObj).toEqual({
      email: "a@b.com",
      username: "abc",
      password: "secret6",
    });
  });

  it("API success: à¹€à¸à¹‡à¸š user à¹ƒà¸™ localStorage à¹à¸¥à¸°à¹€à¸£à¸µà¸¢à¸ onSignUpSuccess", async () => {
    const fakeUser = { username: "me", email: "me@x.com", role: "member" };
    mockFetchOnce({ success: true, user: fakeUser });
    const onSignUpSuccess = vi.fn();

    render(
      <MemoryRouter>
        <SignUp onSignUpSuccess={onSignUpSuccess} />
      </MemoryRouter>
    );

    typeIntoForm({});
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    await waitFor(() => {
      expect(localStorage.setItem).toHaveBeenCalledWith("user", JSON.stringify(fakeUser));
      expect(onSignUpSuccess).toHaveBeenCalledWith(fakeUser);
    });
  });

  it("API success (à¹„à¸¡à¹ˆà¸¡à¸µ onSignUpSuccess): redirect à¹„à¸› /Home", async () => {
    const fakeUser = { username: "me", email: "me@x.com", role: "member" };
    mockFetchOnce({ success: true, user: fakeUser });

    const originalLocation = window.location;
    Object.defineProperty(window, "location", {
      value: { ...originalLocation, href: "" },
      writable: true,
    });

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({});
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    await waitFor(() => {
      expect(window.location.href).toBe("/Home");
    });

    Object.defineProperty(window, "location", { value: originalLocation });
  });

  it("API error: à¹à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸ˆà¸²à¸ server", async () => {
    mockFetchOnce({ success: false, message: "à¸­à¸µà¹€à¸¡à¸¥à¸™à¸µà¹‰à¸¡à¸µà¸œà¸¹à¹‰à¹ƒà¸Šà¹‰à¸‡à¸²à¸™à¹à¸¥à¹‰à¸§" });

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({});
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    expect(await screen.findByText(/à¸­à¸µà¹€à¸¡à¸¥à¸™à¸µà¹‰à¸¡à¸µà¸œà¸¹à¹‰à¹ƒà¸Šà¹‰à¸‡à¸²à¸™à¹à¸¥à¹‰à¸§/i)).toBeInTheDocument();
  });

  it("API error (à¹„à¸¡à¹ˆà¸¡à¸µ message): à¹ƒà¸Šà¹‰ fallback 'à¸à¸²à¸£à¸ªà¸¡à¸±à¸„à¸£à¸ªà¸¡à¸²à¸Šà¸´à¸à¸¥à¹‰à¸¡à¹€à¸«à¸¥à¸§'", async () => {
    mockFetchOnce({ success: false });

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({});
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    expect(await screen.findByText(/à¸à¸²à¸£à¸ªà¸¡à¸±à¸„à¸£à¸ªà¸¡à¸²à¸Šà¸´à¸à¸¥à¹‰à¸¡à¹€à¸«à¸¥à¸§/i)).toBeInTheDocument();
  });

  it("Network error: à¹à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸ à¸²à¸©à¸²à¹„à¸—à¸¢à¸•à¸²à¸¡à¸—à¸µà¹ˆà¸à¸³à¸«à¸™à¸”", async () => {
    (globalThis.fetch as any) = vi.fn().mockRejectedValueOnce(new Error("Network down"));

    render(
      <MemoryRouter>
        <SignUp />
      </MemoryRouter>
    );

    typeIntoForm({});
    fireEvent.click(screen.getByRole("button", { name: /create account/i }));

    expect(
      await screen.findByText(/à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸•à¹ˆà¸­à¹€à¸‹à¸´à¸£à¹Œà¸Ÿà¹€à¸§à¸­à¸£à¹Œà¹„à¸¡à¹ˆà¹„à¸”à¹‰ à¸à¸£à¸¸à¸“à¸²à¸¥à¸­à¸‡à¹ƒà¸«à¸¡à¹ˆà¸­à¸µà¸à¸„à¸£à¸±à¹‰à¸‡/i)
    ).toBeInTheDocument();
  });
});



