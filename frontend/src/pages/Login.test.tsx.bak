// src/pages/Login.test.tsx
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import Login from "./Login";

const mockNavigate = vi.fn();
vi.mock("react-router-dom", async () => {
  const actual = await vi.importActual<any>("react-router-dom");
  return { ...actual, useNavigate: () => mockNavigate };
});

function mockFetchOnce(data: any, ok = true) {
  (globalThis.fetch as any) = vi.fn().mockResolvedValueOnce({
    ok,
    json: async () => data,
    headers: { get: () => "application/json" },
  } as Response);
}

const isAnyLoginError = (txt: string) =>
  /invalid|login failed|à¹€à¸‚à¹‰à¸²à¸ªà¸¹à¹ˆà¸£à¸°à¸šà¸šà¸¥à¹‰à¸¡à¹€à¸«à¸¥à¸§|à¸œà¸´à¸”à¸žà¸¥à¸²à¸”|à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸•à¹ˆà¸­|à¹„à¸¡à¹ˆà¸ªà¸²à¸¡à¸²à¸£à¸–|network/i.test(txt);

describe("Login Frontend", () => {
  beforeEach(() => {
    vi.restoreAllMocks();
    vi.spyOn(window.localStorage.__proto__, "setItem");
    vi.spyOn(window, "dispatchEvent");
    mockNavigate.mockReset();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("à¹à¸ªà¸”à¸‡à¸›à¸¸à¹ˆà¸¡ login à¸šà¸™à¸«à¸™à¹‰à¸²à¸ˆà¸­", () => {
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    expect(screen.getByRole("button", { name: /login/i })).toBeInTheDocument();
  });

  it("à¹€à¸›à¸¥à¸µà¹ˆà¸¢à¸™à¸›à¸¸à¹ˆà¸¡à¹€à¸›à¹‡à¸™ loading à¸‚à¸“à¸° submit", async () => {
    mockFetchOnce({ success: false, message: "x" });
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "user" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "pass" } });
    const btn = screen.getByRole("button", { name: /login/i });
    fireEvent.click(btn);
    expect(btn).toBeDisabled();
    expect(btn).toHaveTextContent(/à¸à¸³à¸¥à¸±à¸‡à¹€à¸‚à¹‰à¸²à¸ªà¸¹à¹ˆà¸£à¸°à¸šà¸š/i);
    await waitFor(() => expect(btn).toHaveTextContent(/login/i));
  });

  it("navigate à¹„à¸› /home à¹€à¸¡à¸·à¹ˆà¸­ login à¸ªà¸³à¹€à¸£à¹‡à¸ˆ", async () => {
    const fakeUser = { username: "u", role: "member" };
    mockFetchOnce({ success: true, user: fakeUser });
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    await waitFor(() => {
      expect(localStorage.setItem).toHaveBeenCalledWith("isAuthenticated", "true");
      expect(localStorage.setItem).toHaveBeenCalledWith("user", JSON.stringify(fakeUser));
      expect(mockNavigate).toHaveBeenCalledWith("/home", expect.objectContaining({ replace: true }));
    });
  });

  it("à¹à¸ªà¸”à¸‡ error message à¸ˆà¸²à¸ API", async () => {
    mockFetchOnce({ success: false, message: "Invalid credentials" });
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "wrong" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "wrong" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    expect(await screen.findByText((t) => isAnyLoginError(t))).toBeInTheDocument();
  });

  it("à¹à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡ error à¸ à¸²à¸©à¸²à¹„à¸—à¸¢à¹€à¸¡à¸·à¹ˆà¸­ network à¸¥à¹‰à¸¡à¹€à¸«à¸¥à¸§", async () => {
    (globalThis.fetch as any) = vi.fn().mockRejectedValueOnce(new Error("Network down"));
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    expect(await screen.findByText((t) => isAnyLoginError(t))).toBeInTheDocument();
  });

  it("à¸à¸”à¸›à¸¸à¹ˆà¸¡ Sign Up à¹à¸¥à¹‰à¸§ navigate à¹„à¸› /signup", () => {
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.click(screen.getByRole("button", { name: /Sign Up/i }));
    expect(mockNavigate).toHaveBeenCalledWith("/signup");
  });

  it("à¹€à¸£à¸µà¸¢à¸ fetch à¸”à¹‰à¸§à¸¢à¸žà¸²à¸£à¸²à¸¡à¸´à¹€à¸•à¸­à¸£à¹Œà¸—à¸µà¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡", async () => {
    const fakeUser = { username: "u", role: "member" };
    const fetchSpy = vi.spyOn(globalThis, "fetch" as any).mockResolvedValueOnce({
      ok: true,
      json: async () => ({ success: true, user: fakeUser }),
      headers: { get: () => "application/json" },
    } as Response);
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    await waitFor(() => expect(fetchSpy).toHaveBeenCalled());
    const [url, options] = fetchSpy.mock.calls[0] as [string, RequestInit];
    expect(url).toBe("/api/api/auth/login");
    expect(options.method).toBe("POST");
    const contentType = new Headers(options.headers as HeadersInit).get("Content-Type");
    expect(contentType).toBe("application/json");
    expect(options.credentials).toBe("include");
    expect(JSON.parse(String(options.body))).toEqual({ username: "u", password: "p" });
  });

  it("à¸Šà¹ˆà¸­à¸‡à¸à¸£à¸­à¸à¸–à¸¹à¸ disabled à¸£à¸°à¸«à¸§à¹ˆà¸²à¸‡ loading", async () => {
    (globalThis.fetch as any) = vi.fn().mockResolvedValueOnce({
      ok: true,
      json: async () => ({ success: false, message: "x" }),
      headers: { get: () => "application/json" },
    } as Response);
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    const userInput = screen.getByLabelText(/Username/i) as HTMLInputElement;
    const passInput = screen.getByLabelText(/Password/i) as HTMLInputElement;
    const btn = screen.getByRole("button", { name: /login/i });
    fireEvent.change(userInput, { target: { value: "u" } });
    fireEvent.change(passInput, { target: { value: "p" } });
    fireEvent.click(btn);
    expect(userInput).toBeDisabled();
    expect(passInput).toBeDisabled();
    await waitFor(() => expect(btn).not.toBeDisabled());
  });

  it("à¸¥à¹‰à¸²à¸‡ error à¸à¹ˆà¸­à¸™à¸ªà¹ˆà¸‡à¸„à¸£à¸±à¹‰à¸‡à¹ƒà¸«à¸¡à¹ˆ (error à¹€à¸à¹ˆà¸²à¸«à¸²à¸¢à¹„à¸›à¹€à¸¡à¸·à¹ˆà¸­à¸à¸”à¸ªà¹ˆà¸‡à¸­à¸µà¸à¸„à¸£à¸±à¹‰à¸‡)", async () => {
    mockFetchOnce({ success: false, message: "Invalid credentials" });
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "x" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    const firstErr = await screen.findByText((t) => isAnyLoginError(t));
    expect(firstErr).toBeInTheDocument();
    mockFetchOnce({ success: false, message: "Another error" });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    await waitFor(() => {
      expect(screen.queryByText((t) => /invalid/i.test(t))).not.toBeInTheDocument();
    });
    expect(await screen.findByText((t) => isAnyLoginError(t))).toBeInTheDocument();
  });

  it("à¹ƒà¸Šà¹‰ fallback à¹€à¸¡à¸·à¹ˆà¸­ server à¹„à¸¡à¹ˆà¸ªà¹ˆà¸‡ message (à¹à¸ªà¸”à¸‡à¸ªà¸–à¸²à¸™à¸°à¸«à¸£à¸·à¸­à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡ Invalid response)", async () => {
    (globalThis.fetch as any) = vi.fn().mockResolvedValueOnce({
      ok: false,
      status: 400,
      statusText: "Bad Request",
      headers: { get: () => "application/json" },
      json: async () => ({ success: false }),
    } as Response);
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    const matches = await screen.findAllByText((_, node) => {
      const text = node?.textContent || "";
      return /400 Bad Request|Invalid response from server/i.test(text);
    });
    expect(matches.length).toBeGreaterThan(0);
  });

  it("à¹€à¸£à¸µà¸¢à¸ onLoginSuccess à¸”à¹‰à¸§à¸¢ user à¸—à¸µà¹ˆà¹„à¸”à¹‰à¸ˆà¸²à¸ API", async () => {
    const fakeUser = { username: "u", role: "member" };
    const onLoginSuccess = vi.fn();
    mockFetchOnce({ success: true, user: fakeUser });
    render(
      <MemoryRouter>
        <Login onLoginSuccess={onLoginSuccess} />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    await waitFor(() => expect(onLoginSuccess).toHaveBeenCalledWith(fakeUser));
  });

  it('dispatch event "auth-changed" à¸«à¸¥à¸±à¸‡à¸¥à¹‡à¸­à¸à¸­à¸´à¸™à¸ªà¸³à¹€à¸£à¹‡à¸ˆ', async () => {
    const fakeUser = { username: "u", role: "member" };
    const dispatchSpy = vi.spyOn(window, "dispatchEvent");
    mockFetchOnce({ success: true, user: fakeUser });
    render(
      <MemoryRouter>
        <Login />
      </MemoryRouter>
    );
    fireEvent.change(screen.getByLabelText(/Username/i), { target: { value: "u" } });
    fireEvent.change(screen.getByLabelText(/Password/i), { target: { value: "p" } });
    fireEvent.click(screen.getByRole("button", { name: /login/i }));
    await waitFor(() => {
      expect(dispatchSpy).toHaveBeenCalled();
      const evt = dispatchSpy.mock.calls[0][0] as Event;
      expect(evt.type).toBe("auth-changed");
    });
  });
});




