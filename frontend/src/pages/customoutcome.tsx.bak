// src/pages/CustomOutcome.tsx
// @ts-nocheck
import { useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import "./customoutcome.css";
import {
  Check,
  // Food & Drink
  Utensils, Pizza, Drumstick, Coffee, Beer, CupSoda, IceCream, Candy, Cake,
  // Travel
  Car, Bus, Bike, Plane, Train, Ship, Fuel, Map, MapPin,
  // Health
  Stethoscope, HeartPulse, Activity, Pill, Hospital, Ambulance,
  // Shopping / Style
  ShoppingCart, ShoppingBag, Gift, Tag, Shirt, CreditCard, SoapDispenserDroplet,
  // Work & Finance
  Briefcase, Laptop, Calculator, BarChart, Coins, Wallet,
  // Learning
  BookOpen, GraduationCap, Pencil,
  // Sports
  Dumbbell, Goal, Trophy, Volleyball,
  // Pets
  Dog, Cat, Fish, Bird,
  // Home / Family
  Home, Sofa, Bed, Wrench, Hammer,
  // Entertainment / Relax
  Gamepad, Music, Film, Popcorn, Clapperboard, Sprout, Search
} from "lucide-react";
import BottomNav from "./buttomnav";
import { useTempCategory } from "../TempCategoryContext";

type LucideIcon = React.ComponentType<{ className?: string }>;
type IconItem = { key: string; label: string; Icon: LucideIcon };

const ICON_SETS: Record<string, IconItem[]> = {
  "à¸­à¸²à¸«à¸²à¸£ & à¹€à¸„à¸£à¸·à¹ˆà¸­à¸‡à¸”à¸·à¹ˆà¸¡": [
    { key: "food", label: "à¸­à¸²à¸«à¸²à¸£", Icon: Utensils },
    { key: "pizza", label: "à¸žà¸´à¸‹à¸‹à¹ˆà¸²", Icon: Pizza },
    { key: "drumstick", label: "à¹„à¸à¹ˆà¸—à¸­à¸”", Icon: Drumstick },
    { key: "coffee", label: "à¸à¸²à¹à¸Ÿ", Icon: Coffee },
    { key: "beer", label: "à¹€à¸šà¸µà¸¢à¸£à¹Œ", Icon: Beer },
    { key: "cupsoda", label: "à¹‚à¸‹à¸”à¸²", Icon: CupSoda },
    { key: "icecream", label: "à¹„à¸­à¸¨à¸à¸£à¸µà¸¡", Icon: IceCream },
    { key: "candy", label: "à¸‚à¸™à¸¡", Icon: Candy },
    { key: "cake", label: "à¹€à¸„à¹‰à¸", Icon: Cake },
  ],
  "à¸à¸²à¸£à¹€à¸”à¸´à¸™à¸—à¸²à¸‡": [
    { key: "car", label: "à¸£à¸–à¸¢à¸™à¸•à¹Œ", Icon: Car },
    { key: "bus", label: "à¸£à¸–à¸šà¸±à¸ª", Icon: Bus },
    { key: "bike", label: "à¸ˆà¸±à¸à¸£à¸¢à¸²à¸™", Icon: Bike },
    { key: "plane", label: "à¹€à¸„à¸£à¸·à¹ˆà¸­à¸‡à¸šà¸´à¸™", Icon: Plane },
    { key: "train", label: "à¸£à¸–à¹„à¸Ÿ", Icon: Train },
    { key: "ship", label: "à¹€à¸£à¸·à¸­", Icon: Ship },
    { key: "fuel", label: "à¸™à¹‰à¸³à¸¡à¸±à¸™", Icon: Fuel },
    { key: "map", label: "à¹à¸œà¸™à¸—à¸µà¹ˆ", Icon: Map },
    { key: "mappin", label: "à¸›à¸±à¸à¸«à¸¡à¸¸à¸”", Icon: MapPin },
  ],
  "à¸ªà¸¸à¸‚à¸ à¸²à¸ž & à¸à¸²à¸£à¹à¸žà¸—à¸¢à¹Œ": [
    { key: "stethoscope", label: "à¸«à¸¡à¸­", Icon: Stethoscope },
    { key: "heart", label: "à¸ªà¸¸à¸‚à¸ à¸²à¸ž", Icon: HeartPulse },
    { key: "activity", label: "à¸­à¸­à¸à¸à¸³à¸¥à¸±à¸‡", Icon: Activity },
    { key: "pill", label: "à¸¢à¸²", Icon: Pill },
    { key: "hospital", label: "à¹‚à¸£à¸‡à¸žà¸¢à¸²à¸šà¸²à¸¥", Icon: Hospital },
    { key: "ambulance", label: "à¸›à¸à¸¡à¸žà¸¢à¸²à¸šà¸²à¸¥", Icon: Ambulance },
  ],
  "à¹€à¸ªà¸·à¹‰à¸­à¸œà¹‰à¸² & à¸Šà¹‰à¸­à¸›à¸›à¸´à¹‰à¸‡": [
    { key: "cart", label: "à¸Šà¹‰à¸­à¸›à¸›à¸´à¹‰à¸‡", Icon: ShoppingCart },
    { key: "bag", label: "à¸à¸£à¸°à¹€à¸›à¹‹à¸²", Icon: ShoppingBag },
    { key: "gift", label: "à¸‚à¸­à¸‡à¸‚à¸§à¸±à¸", Icon: Gift },
    { key: "tag", label: "à¸›à¹‰à¸²à¸¢à¸£à¸²à¸„à¸²", Icon: Tag },
    { key: "shirt", label: "à¹€à¸ªà¸·à¹‰à¸­à¸œà¹‰à¸²", Icon: Shirt },
    { key: "creditcard", label: "à¸šà¸±à¸•à¸£à¹€à¸„à¸£à¸”à¸´à¸•", Icon: CreditCard },
    { key: "soap", label: "à¸‚à¸­à¸‡à¹ƒà¸Šà¹‰", Icon: SoapDispenserDroplet },
  ],
  "à¸‡à¸²à¸™ & à¸à¸²à¸£à¹€à¸‡à¸´à¸™": [
    { key: "briefcase", label: "à¸‡à¸²à¸™", Icon: Briefcase },
    { key: "laptop", label: "à¸„à¸­à¸¡", Icon: Laptop },
    { key: "calculator", label: "à¸„à¸³à¸™à¸§à¸“", Icon: Calculator },
    { key: "barchart", label: "à¸£à¸²à¸¢à¸‡à¸²à¸™", Icon: BarChart },
    { key: "coins", label: "à¹€à¸«à¸£à¸µà¸¢à¸", Icon: Coins },
    { key: "wallet", label: "à¸à¸£à¸°à¹€à¸›à¹‹à¸²à¹€à¸‡à¸´à¸™", Icon: Wallet },
  ],
  "à¸à¸²à¸£à¹€à¸£à¸µà¸¢à¸™à¸£à¸¹à¹‰": [
    { key: "book", label: "à¸«à¸™à¸±à¸‡à¸ªà¸·à¸­", Icon: BookOpen },
    { key: "graduation", label: "à¹€à¸£à¸µà¸¢à¸™", Icon: GraduationCap },
    { key: "pencil", label: "à¹€à¸‚à¸µà¸¢à¸™", Icon: Pencil },
  ],
  "à¸à¸µà¸¬à¸² & à¸à¸´à¸ˆà¸à¸£à¸£à¸¡": [
    { key: "dumbbell", label: "à¸Ÿà¸´à¸•à¹€à¸™à¸ª", Icon: Dumbbell },
    { key: "goal", label: "à¸Ÿà¸¸à¸•à¸šà¸­à¸¥", Icon: Goal },
    { key: "trophy", label: "à¸–à¹‰à¸§à¸¢à¸£à¸²à¸‡à¸§à¸±à¸¥", Icon: Trophy },
    { key: "volleyball", label: "à¸§à¸­à¸¥à¹€à¸¥à¸¢à¹Œà¸šà¸­à¸¥", Icon: Volleyball },
  ],
  "à¸ªà¸±à¸•à¸§à¹Œà¹€à¸¥à¸µà¹‰à¸¢à¸‡": [
    { key: "dog", label: "à¸ªà¸¸à¸™à¸±à¸‚", Icon: Dog },
    { key: "cat", label: "à¹à¸¡à¸§", Icon: Cat },
    { key: "fish", label: "à¸›à¸¥à¸²", Icon: Fish },
    { key: "bird", label: "à¸™à¸", Icon: Bird },
  ],
  "à¸šà¹‰à¸²à¸™ & à¸„à¸£à¸­à¸šà¸„à¸£à¸±à¸§": [
    { key: "home", label: "à¸šà¹‰à¸²à¸™", Icon: Home },
    { key: "sofa", label: "à¹‚à¸‹à¸Ÿà¸²", Icon: Sofa },
    { key: "bed", label: "à¹€à¸•à¸µà¸¢à¸‡", Icon: Bed },
    { key: "wrench", label: "à¸›à¸£à¸°à¹à¸ˆ", Icon: Wrench },
    { key: "hammer", label: "à¸„à¹‰à¸­à¸™", Icon: Hammer },
  ],
  "à¸šà¸±à¸™à¹€à¸—à¸´à¸‡ & à¸œà¹ˆà¸­à¸™à¸„à¸¥à¸²à¸¢": [
    { key: "game", label: "à¹€à¸à¸¡", Icon: Gamepad },
    { key: "music", label: "à¹€à¸žà¸¥à¸‡", Icon: Music },
    { key: "film", label: "à¸«à¸™à¸±à¸‡", Icon: Film },
    { key: "popcorn", label: "à¸›à¹Šà¸­à¸›à¸„à¸­à¸£à¹Œà¸™", Icon: Popcorn },
    { key: "clapper", label: "à¸à¸­à¸‡à¸–à¹ˆà¸²à¸¢", Icon: Clapperboard },
    { key: "sprout", label: "à¸›à¸¥à¸¹à¸à¸•à¹‰à¸™à¹„à¸¡à¹‰", Icon: Sprout },
  ],
};

export default function CategoryCustom() {
  const nav = useNavigate();
  const { setTempCategory } = useTempCategory();

  const [picked, setPicked] = useState<IconItem | null>(null);
  const [name, setName] = useState("");
  const [query, setQuery] = useState("");

  const filteredSets = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return ICON_SETS;

    const next: Record<string, IconItem[]> = {};
    Object.entries(ICON_SETS).forEach(([group, list]) => {
      if (group.toLowerCase().includes(q)) {
        next[group] = list;
        return;
      }
      const hit = list.filter(
        (it) =>
          it.label.toLowerCase().includes(q) ||
          it.key.toLowerCase().includes(q)
      );
      if (hit.length) next[group] = hit;
    });
    return next;
  }, [query]);

  function handleConfirm() {
    const trimmed = name.trim();
    if (!picked || !trimmed) {
      alert("à¸à¸£à¸¸à¸“à¸²à¹€à¸¥à¸·à¸­à¸à¹„à¸­à¸„à¸­à¸™à¹à¸¥à¸°à¸•à¸±à¹‰à¸‡à¸Šà¸·à¹ˆà¸­");
      return;
    }
    // âœ… à¸•à¸±à¹‰à¸‡à¸„à¹ˆà¸²à¸«à¸¡à¸§à¸”à¸Šà¸±à¹ˆà¸§à¸„à¸£à¸²à¸§à¹à¸¥à¹‰à¸§à¸à¸¥à¸±à¸šà¹„à¸›à¸«à¸™à¹‰à¸² Expense
    setTempCategory({ name: trimmed, iconKey: picked.key });
    nav(-1); // à¸à¸¥à¸±à¸šà¸«à¸™à¹‰à¸²à¸à¹ˆà¸­à¸™à¸«à¸™à¹‰à¸² (Expense)
  }

  return (
    <div className="cc-wrap">
      {/* Header */}
      <header className="cc-header">
        <h1 className="cc-title">OutcomeCustom</h1>
      </header>

      {/* Search bar */}
      <div className="cc-search">
        <Search className="cc-search-icon" />
        <input
          className="cc-search-input"
          placeholder="à¸„à¹‰à¸™à¸«à¸²à¹„à¸­à¸„à¸­à¸™â€¦ (à¸žà¸´à¸¡à¸žà¹Œà¹€à¸Šà¹ˆà¸™ à¸à¸²à¹à¸Ÿ, à¸£à¸–, à¸‡à¸²à¸™, music)"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        {query && (
          <button className="cc-search-clear" onClick={() => setQuery("")} aria-label="à¸¥à¹‰à¸²à¸‡à¸„à¸³à¸„à¹‰à¸™">
            Ã—
          </button>
        )}
      </div>

      {/* Creator */}
      <section className="cc-creator">
        <div className="cc-picked">
          {picked ? <picked.Icon className="cc-picked-icon" /> : <span>?</span>}
        </div>

        <div className="cc-namefield">
          <input
            className="cc-nameinput"
            placeholder="à¸Šà¸·à¹ˆà¸­à¸«à¸¡à¸§à¸”à¸«à¸¡à¸¹à¹ˆ"
            value={name}
            onChange={(e) => setName(e.target.value)}
            maxLength={32}
          />
          <div className="cc-underline" />
        </div>

        <button className="cc-confirm" onClick={handleConfirm} aria-label="à¸¢à¸·à¸™à¸¢à¸±à¸™">
          <Check className="cc-checkicon" />
        </button>
      </section>

      {/* Library (à¸à¸£à¸­à¸‡à¸•à¸²à¸¡à¸„à¸³à¸„à¹‰à¸™) */}
      <section className="cc-library">
        {Object.keys(filteredSets).length === 0 ? (
          <p className="cc-noresult">à¹„à¸¡à¹ˆà¸žà¸šà¹„à¸­à¸„à¸­à¸™à¸—à¸µà¹ˆà¸•à¸£à¸‡à¸à¸±à¸š â€œ{query}â€</p>
        ) : (
          Object.entries(filteredSets).map(([group, list]) => (
            <div key={group} className="cc-group">
              <h3 className="cc-group-title">{group}</h3>
              <div className="cc-grid">
                {list.map((item) => (
                  <button
                    key={item.key}
                    className={`cc-chip ${picked?.key === item.key ? "active" : ""}`}
                    onClick={() => setPicked(item)}
                    title={item.label}
                  >
                    <item.Icon className="cc-icon" />
                  </button>
                ))}
              </div>
            </div>
          ))
        )}
      </section>

      <BottomNav />
    </div>
  );
}




