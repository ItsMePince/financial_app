// src/pages/income.test.tsx
import React from "react";
import { render, screen, fireEvent, waitFor, within } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import Income from "./income";

// mock BottomNav à¹€à¸žà¸·à¹ˆà¸­à¹„à¸¡à¹ˆà¹ƒà¸«à¹‰ error à¹€à¸£à¸·à¹ˆà¸­à¸‡ useLocation
vi.mock("./buttomnav", () => ({
  default: () => <div data-testid="bottom-nav" />,
}));

// mock usePaymentMethod
vi.mock("../PaymentMethodContext", () => ({
  usePaymentMethod: () => ({
    payment: { name: "à¹€à¸‡à¸´à¸™à¸ªà¸”" },
    setPayment: vi.fn(),
  }),
}));

function getConfirmBtn() {
  const buttons = screen.getAllByRole("button") as HTMLButtonElement[];
  const btn = buttons.find((b) => b.classList.contains("ok-btn"));
  if (!btn) throw new Error("à¹„à¸¡à¹ˆà¸žà¸šà¸›à¸¸à¹ˆà¸¡à¸¢à¸·à¸™à¸¢à¸±à¸™ (.ok-btn)");
  return btn;
}

function getBackspaceBtn() {
  const btn = document.querySelector<HTMLButtonElement>(".keypad .key.danger");
  if (!btn) throw new Error("à¹„à¸¡à¹ˆà¸žà¸šà¸›à¸¸à¹ˆà¸¡à¸¥à¸š (.keypad .key.danger)");
  return btn;
}

describe("Income Page", () => {
  const originalAlert = window.alert;
  beforeEach(() => {
    vi.restoreAllMocks();
    window.alert = vi.fn();
    sessionStorage.clear();
  });
  afterEach(() => {
    window.alert = originalAlert;
  });

  it("à¹à¸ªà¸”à¸‡à¸«à¸±à¸§à¸‚à¹‰à¸­ 'à¸£à¸²à¸¢à¹„à¸”à¹‰' à¹à¸¥à¸°à¸›à¸¸à¹ˆà¸¡ confirm", () => {
    render(
      <MemoryRouter>
        <Income />
      </MemoryRouter>
    );
    expect(screen.getByText("à¸£à¸²à¸¢à¹„à¸”à¹‰")).toBeInTheDocument();
    expect(getConfirmBtn()).toBeInTheDocument();
  });

  it("à¸ªà¸²à¸¡à¸²à¸£à¸–à¹€à¸¥à¸·à¸­à¸à¸«à¸¡à¸§à¸”à¸«à¸¡à¸¹à¹ˆà¹„à¸”à¹‰", () => {
    render(
      <MemoryRouter>
        <Income />
      </MemoryRouter>
    );
    const workBtn = screen.getByRole("button", { name: /à¸—à¸³à¸‡à¸²à¸™/ });
    fireEvent.click(workBtn);
    expect(workBtn.className).toMatch(/active/);
  });

  it("keypad: à¸žà¸´à¸¡à¸žà¹Œà¸•à¸±à¸§à¹€à¸¥à¸‚à¹à¸¥à¸°à¸¥à¸šà¹„à¸”à¹‰", () => {
    render(
      <MemoryRouter>
        <Income />
      </MemoryRouter>
    );

    const keypad = document.querySelector(".keypad") as HTMLElement;
    const amountEl = document.querySelector(".amount .num") as HTMLElement;

    // à¸ˆà¸³à¸à¸±à¸”à¸à¸²à¸£à¸„à¹‰à¸™à¸«à¸²à¹ƒà¸™ keypad à¹€à¸—à¹ˆà¸²à¸™à¸±à¹‰à¸™ à¹€à¸žà¸·à¹ˆà¸­à¹„à¸¡à¹ˆà¹„à¸›à¸Šà¸™à¸•à¸±à¸§à¹€à¸¥à¸‚à¸—à¸µà¹ˆà¹à¸ªà¸”à¸‡à¸œà¸¥
    fireEvent.click(within(keypad).getByText("1"));
    fireEvent.click(within(keypad).getByText("2"));

    expect(amountEl).toHaveTextContent("12");

    // à¸¥à¸šà¸•à¸±à¸§à¹€à¸¥à¸‚à¸”à¹‰à¸§à¸¢à¸›à¸¸à¹ˆà¸¡à¹„à¸­à¸„à¸­à¸™
    fireEvent.click(getBackspaceBtn());
    expect(amountEl).toHaveTextContent("1");
  });

  it("à¹à¸ªà¸”à¸‡ alert à¸–à¹‰à¸² required field à¹„à¸¡à¹ˆà¸„à¸£à¸š", async () => {
    render(
      <MemoryRouter>
        <Income />
      </MemoryRouter>
    );

    fireEvent.click(getConfirmBtn());

    await waitFor(() => {
      expect(window.alert).toHaveBeenCalledWith("Required âŒ");
    });
  });

  it("à¹€à¸£à¸µà¸¢à¸ API à¹à¸¥à¸° reset à¹€à¸¡à¸·à¹ˆà¸­à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¸„à¸£à¸šà¸–à¹‰à¸§à¸™", async () => {
    const fetchMock = vi
      .spyOn(globalThis, "fetch")
      .mockResolvedValueOnce({
        ok: true,
        json: async () => ({}),
        text: async () => "OK",
      } as Response);

    render(
      <MemoryRouter>
        <Income />
      </MemoryRouter>
    );

    // à¸à¸£à¸­à¸à¸„à¹ˆà¸²à¸—à¸µà¹ˆà¸ˆà¸³à¹€à¸›à¹‡à¸™
    fireEvent.change(screen.getByPlaceholderText("à¹‚à¸™à¹‰à¸•"), {
      target: { value: "test note" },
    });
    fireEvent.change(screen.getByPlaceholderText("à¸ªà¸–à¸²à¸™à¸—à¸µà¹ˆ"), {
      target: { value: "office" },
    });

    // à¸žà¸´à¸¡à¸žà¹Œà¸ˆà¸³à¸™à¸§à¸™à¹€à¸‡à¸´à¸™ 10 (à¹ƒà¸™ keypad)
    const keypad = document.querySelector(".keypad") as HTMLElement;
    fireEvent.click(within(keypad).getByText("1"));
    fireEvent.click(within(keypad).getByText("0"));

    // à¸à¸” confirm
    fireEvent.click(getConfirmBtn());

    await waitFor(() => {
      expect(fetchMock).toHaveBeenCalled();
      expect(window.alert).toHaveBeenCalledWith("à¸šà¸±à¸™à¸—à¸¶à¸à¹€à¸£à¸µà¸¢à¸šà¸£à¹‰à¸­à¸¢ âœ…");
    });
  });
});



