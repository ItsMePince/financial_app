// src/pages/income.tsx
// @ts-nocheck
import React, { useEffect, useMemo, useRef, useState } from "react";
import "./income.css";
import BottomNav from "./buttomnav";
import {
  ClipboardList, MapPin, HandCoins, Banknote, Bitcoin, CalendarDays,
  Gift, Coins, Wallet, Briefcase, Laptop, CreditCard, BarChart as BarChart, Clock, ShieldCheck,
  UserCheck, BookOpen, Camera, Bike, Car, PenTool, Code,
  PiggyBank, LineChart, FileText, Layers, TrendingUp,
  Home as HomeIcon, Bed, Building, Truck, Package,
  ShoppingBag, Store, Boxes, Tent, Ticket,
  Video, Mic, Radio, Music, Film, Gamepad,
  ClipboardCheck, Trophy, GraduationCap,
  Coffee, Star, Gem,
  CircuitBoard, Image, Cloud, Lock,
  Link, Megaphone, FileBadge, Users,
} from "lucide-react";
import { useLocation, useNavigate } from "react-router-dom";
import { usePaymentMethod } from "../PaymentMethodContext";

const API_BASE =
  (import.meta.env.VITE_API_BASE as string) || "http://localhost:8081";

/* inline icons */
const ChevronDown = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="M6 9l6 6 6-6" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);
const IconEtc = ({ active = false }: { active?: boolean }) => (
  <svg viewBox="0 0 24 24" className={`icon ${active ? "icon-active" : ""}`}>
    <circle cx="5" cy="12" r="1.8" />
    <circle cx="12" cy="12" r="1.8" />
    <circle cx="19" cy="12" r="1.8" />
  </svg>
);
const IconBackspace = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="M4 12 9 6h10a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H9L4 12Zm6-3 6 6m0-6-6 6"
      stroke="currentColor" strokeWidth="1.7" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);
const IconCheck = () => (
  <svg viewBox="0 0 24 24" className="icon">
    <path d="m5 12 4 4 10-10" stroke="currentColor" strokeWidth="2.2" fill="none" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);

/** ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */
type Category = "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°" | "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" | "‡∏•‡∏á‡∏ó‡∏∏‡∏ô" | "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";

const ICON_MAP: Record<string, React.FC<any>> = {
  Briefcase, BarChart, Clock, Wallet, ShieldCheck,
  Laptop, UserCheck, BookOpen, Camera, Bike, Car, PenTool, Code, Banknote,
  Coins, PiggyBank, LineChart, FileText, Layers, TrendingUp,
  Home: HomeIcon, Bed, Building, Truck, Package,
  ShoppingBag, Store, Boxes, Tent, CreditCard, Ticket,
  Video, Mic, Radio, Music, Film, Gamepad,
  ClipboardList, ClipboardCheck, Trophy, GraduationCap,
  Gift, Coffee, Star, Gem, HandCoins,
  Bitcoin, CircuitBoard, Image, Cloud, Lock,
  Link, Megaphone, FileBadge, Users,
};

const getTodayISO = () => {
  const now = new Date();
  return `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,"0")}-${String(now.getDate()).padStart(2,"0")}`;
};

/** iconKey ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ */
const defaultIconKeyByCategory: Record<Category, string> = {
  "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°": "HandCoins",
  "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô": "Banknote",
  "‡∏•‡∏á‡∏ó‡∏∏‡∏ô": "Bitcoin",
  "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": "more",
};

const DRAFT_KEY = "incomeDraft_v1";

export default function Income() {
  const navigate = useNavigate();
  const location = useLocation();
  const { payment, setPayment } = usePaymentMethod();

  const [category, setCategory] = useState<Category>("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°");
  const [customCat, setCustomCat] = useState<{ label: string; icon?: string } | null>(null);
  const [amount, setAmount] = useState<string>("0");
  const [note, setNote] = useState<string>("");
  const [place, setPlace] = useState<string>("");
  const [date, setDate] = useState<string>(() => getTodayISO());
  const [menuOpen, setMenuOpen] = useState(false);

  // --- ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô draft ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ ---
  useEffect(() => {
    try {
      const raw = sessionStorage.getItem(DRAFT_KEY);
      if (raw) {
        const d = JSON.parse(raw);
        if (d.category) setCategory(d.category);
        if (d.customCat) setCustomCat(d.customCat);
        if (typeof d.amount === "string") setAmount(d.amount);
        if (typeof d.note === "string") setNote(d.note);
        if (typeof d.place === "string") setPlace(d.place);
        if (typeof d.date === "string") setDate(d.date);
        if (d.payment) setPayment(d.payment);
      }
    } catch {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å draft ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
  useEffect(() => {
    const draft = { category, customCat, amount, note, place, date, payment };
    sessionStorage.setItem(DRAFT_KEY, JSON.stringify(draft));
  }, [category, customCat, amount, note, place, date, payment]);

  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ customincome
  useEffect(() => {
    const st = location.state as any;
    if (st?.customIncome) {
      setCategory("‡∏≠‡∏∑‡πà‡∏ô‡πÜ");
      setCustomCat({ label: st.customIncome.label, icon: st.customIncome.icon });
      navigate(location.pathname, { replace: true, state: null });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.state]);

  const pad = useMemo(() => ["1","2","3","4","5","6","7","8","9",".","0","‚å´"], []);
  const onTapKey = (k: string) => {
    if (k === "‚å´") return setAmount(a => (a.length <= 1 ? "0" : a.slice(0,-1)));
    if (k === ".")  return setAmount(a => (a.includes(".") ? a : a + "."));
    setAmount(a => (a === "0" ? k : a + k));
  };

  const resetAll = () => {
    setCategory("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°"); setCustomCat(null); setPayment(null);
    setAmount("0"); setNote(""); setPlace(""); setDate(getTodayISO()); setMenuOpen(false);
    sessionStorage.removeItem(DRAFT_KEY);
  };

  const onConfirm = async () => {
    if (!amount || amount === "0" || !note.trim() || !place.trim() || !date) {
      alert("Required ‚ùå"); return;
    }
    const finalCategory = category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && customCat?.label ? customCat.label : category;

    const iconKey =
      category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
        ? (customCat?.icon || "more")
        : defaultIconKeyByCategory[category];

    const payload = {
      type: "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
      category: finalCategory,
      amount: parseFloat(amount || "0"),
      note, place, date,
      paymentMethod: payment?.name ?? null,
      iconKey,
    };

    try {
      const res = await fetch(`${API_BASE}/api/expenses`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
        credentials: "include", // üîó ‡πÉ‡∏´‡πâ session cookie ‡∏ï‡∏¥‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      });
      if (!res.ok) throw new Error(await res.text());
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ");
      resetAll();
    } catch (e:any) {
      console.error(e);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå " + (e?.message ?? ""));
    }
  };

  const formatDate = (iso: string) => {
    try {
      const d = new Date(iso);
      return d.toLocaleDateString("th-TH",{day:"2-digit",month:"2-digit",year:"numeric"});
    } catch { return "‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ"; }
  };

  const renderCustomIcon = () => {
    if (!customCat?.icon) return <IconEtc active={category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} />;
    const Cmp = ICON_MAP[customCat.icon];
    if (!Cmp) return <IconEtc active={category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"} />;
    return <Cmp className={`icon ${category === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ? "icon-active" : ""} lucide`} size={20} strokeWidth={2} />;
  };

  // ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î picker ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á browser
  const dateBtnRef = useRef<HTMLInputElement>(null);
  const openDatePicker = (e?: React.MouseEvent | React.KeyboardEvent) => {
    e?.preventDefault();
    const el = dateBtnRef.current;
    if (!el) return;
    if (typeof (el as any).showPicker === "function") {
      (el as any).showPicker();
    } else {
      el.click();
      el.focus();
    }
  };

  return (
    <div className="calc-wrap">
      <header className="topbar"></header>

      <div className="type-pill" style={{ position:"relative" }}>
        <button className="pill" onClick={() => setMenuOpen(o=>!o)}>
          <span>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</span><ChevronDown/>
        </button>
        {menuOpen && (
          <div onMouseLeave={() => setMenuOpen(false)}
               style={{position:"absolute",top:"calc(100% + 8px)",left:"50%",transform:"translateX(-50%)",background:"#fff",
                       border:"1px solid rgba(0,0,0,.06)",borderRadius:14,boxShadow:"0 10px 20px rgba(0,0,0,.08)",padding:6,minWidth:220,zIndex:20}}>
            <button onClick={()=>navigate("/expense")}
                    style={{width:"100%",textAlign:"center",padding:"10px 12px",border:0,background:"transparent",borderRadius:10,cursor:"pointer",fontWeight:600,color:"var(--ink)" as any}}
                    onMouseEnter={e=>e.currentTarget.style.background="#f3fbf8"}
                    onMouseLeave={e=>e.currentTarget.style.background="transparent"}>
              ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
            </button>
          </div>
        )}
      </div>

      <div className="category-row">
        <button className={`cat ${category==="‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°"?"active":""}`} onClick={()=>{ setCategory("‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°"); setCustomCat(null); }}>
          <HandCoins className={`icon ${category==="‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°"?"icon-active":""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏°</span>
        </button>
        <button className={`cat ${category==="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"?"active":""}`} onClick={()=>{ setCategory("‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"); setCustomCat(null); }}>
          <Banknote className={`icon ${category==="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"?"icon-active":""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
        </button>
        <button className={`cat ${category==="‡∏•‡∏á‡∏ó‡∏∏‡∏ô"?"active":""}`} onClick={()=>{ setCategory("‡∏•‡∏á‡∏ó‡∏∏‡∏ô"); setCustomCat(null); }}>
          <Bitcoin className={`icon ${category==="‡∏•‡∏á‡∏ó‡∏∏‡∏ô"?"icon-active":""} lucide`} size={20} strokeWidth={2} />
          <span>‡∏•‡∏á‡∏ó‡∏∏‡∏ô</span>
        </button>
        <button className={`cat ${category==="‡∏≠‡∏∑‡πà‡∏ô‡πÜ"?"active":""}`} onClick={()=>{ setCategory("‡∏≠‡∏∑‡πà‡∏ô‡πÜ"); navigate("/customincome"); }}>
          {renderCustomIcon()}
          <span>{category==="‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && customCat?.label ? customCat.label : "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"}</span>
        </button>
      </div>

      <div
        className="amount"
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "baseline",
          gap: 6,
          width: "100%",
        }}
      >
        <span className="num">{amount}</span>
        <span className="currency">‡∏ø</span>
      </div>

      <div className="segments" style={{ position:"relative" }}>
        <button
          type="button"
          className="seg date-seg"
          onClick={openDatePicker}
          onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && openDatePicker(e)}
          style={{ display:"inline-flex", alignItems:"center", gap:6, cursor:"pointer", position:"relative" }}
        >
          <CalendarDays className="icon" size={18} />
          <span>{date ? formatDate(date) : "‡∏ß‡∏±‡∏ô / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / ‡∏õ‡∏µ"}</span>
          <input
            ref={dateBtnRef}
            type="date"
            value={date}
            onChange={(e)=>setDate(e.target.value)}
            style={{ position:"absolute", inset:0, opacity:0, pointerEvents:"none" }}
            tabIndex={-1}
            aria-hidden="true"
          />
        </button>

        <button className="seg" onClick={()=>navigate("/accountselect",{ state:{ from:"/income" } })}>
          {payment ? payment.name : "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
        </button>
      </div>

      <div className="inputs">
        <div className="input"><ClipboardList size={18} strokeWidth={2} className="icon"/><input value={note} onChange={e=>setNote(e.target.value)} placeholder="‡πÇ‡∏ô‡πâ‡∏ï"/></div>
        <div className="input"><MapPin size={18} strokeWidth={2} className="icon"/><input value={place} onChange={e=>setPlace(e.target.value)} placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"/></div>
      </div>

      <div className="keypad">
        {pad.map((k,i)=>(
          <button key={i} className={`key ${k==="‚å´"?"danger":""}`} onClick={()=> (k==="‚å´"? onTapKey("‚å´"): onTapKey(k))}>
            {k==="‚å´"? <IconBackspace/> : k}
          </button>
        ))}
      </div>

      <div className="confirm"><button className="ok-btn" onClick={onConfirm}><IconCheck/></button></div>
      <BottomNav/>
    </div>
  );
}
