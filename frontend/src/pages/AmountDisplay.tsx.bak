// AmountDisplay.tsx
import { useEffect, useLayoutEffect, useRef, useState } from "react";

type Props = {
  value: number | string;     // à¸£à¸±à¸šà¹€à¸¥à¸‚à¸«à¸£à¸·à¸­à¸ªà¸•à¸£à¸´à¸‡à¸—à¸µà¹ˆà¸Ÿà¸­à¸£à¹Œà¹à¸¡à¸•à¸¡à¸²à¹à¸¥à¹‰à¸§à¸à¹‡à¹„à¸”à¹‰
  unit?: string;              // à¹€à¸Šà¹ˆà¸™ "à¸šà¸²à¸—"
  max?: number;               // font-size à¸ªà¸¹à¸‡à¸ªà¸¸à¸” (px)
  min?: number;               // font-size à¸•à¹ˆà¸³à¸ªà¸¸à¸” (px)
  className?: string;
};

const format = (v: number | string) => {
  const s = String(v);
  // à¸–à¹‰à¸²à¹€à¸›à¹‡à¸™à¹€à¸¥à¸‚à¸”à¸´à¸š â†’ à¹ƒà¸ªà¹ˆ , à¸«à¸¥à¸±à¸à¸žà¸±à¸™
  if (/^\d+$/.test(s)) return s.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return s;
};

export default function AmountDisplay({
  value,
  unit = "à¸šà¸²à¸—",
  max = 28,
  min = 12,
  className = "",
}: Props) {
  const wrapRef = useRef<HTMLDivElement | null>(null);
  const numRef  = useRef<HTMLSpanElement | null>(null);
  const [size, setSize] = useState(max);

  const fit = () => {
    const wrap = wrapRef.current;
    const num  = numRef.current;
    if (!wrap || !num) return;

    // à¹€à¸£à¸´à¹ˆà¸¡à¸ˆà¸²à¸à¸‚à¸™à¸²à¸”à¹ƒà¸«à¸à¹ˆà¸ªà¸¸à¸” à¹à¸¥à¹‰à¸§à¸„à¹ˆà¸­à¸¢à¹† à¸¥à¸”à¸¥à¸‡à¸ˆà¸™à¸à¸§à¹ˆà¸²à¸ˆà¸°à¸žà¸­à¸”à¸µ (à¸¡à¸µ safety cap)
    let s = max;
    num.style.fontSize = `${s}px`;
    for (let i = 0; i < 40 && (num.scrollWidth > wrap.clientWidth) && s > min; i++) {
      s -= 1;
      num.style.fontSize = `${s}px`;
    }
    setSize(s);
  };

  // à¹€à¸£à¸µà¸¢à¸à¸•à¸­à¸™ mount à¹à¸¥à¸°à¹€à¸¡à¸·à¹ˆà¸­ value à¹€à¸›à¸¥à¸µà¹ˆà¸¢à¸™
  useLayoutEffect(() => { fit(); }, [value, max, min]);

  // à¸£à¸­à¸‡à¸£à¸±à¸š resize/container à¹€à¸›à¸¥à¸µà¹ˆà¸¢à¸™à¸‚à¸™à¸²à¸”
  useEffect(() => {
    const ro = new ResizeObserver(() => fit());
    if (wrapRef.current) ro.observe(wrapRef.current);
    return () => ro.disconnect();
  }, []);

  return (
    <div ref={wrapRef} className={`amount-display ${className}`}>
      <span ref={numRef} className="num" style={{ fontSize: size }}>
        {format(value)}
      </span>
      {unit && <span className="unit">{unit}</span>}
    </div>
  );
}




