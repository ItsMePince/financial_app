// src/pages/Home.test.tsx
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import Home from "./Home";

// helper: mock fetch response
function mockFetchOnce(data: any, ok = true, status = 200) {
  global.fetch = vi.fn().mockResolvedValue({
    ok,
    status,
    json: async () => data,
  }) as any;
}

describe("Home Page", () => {
  beforeEach(() => {
    vi.restoreAllMocks();
    localStorage.clear();
  });

  it("à¹à¸ªà¸”à¸‡à¸¢à¸­à¸”à¹€à¸‡à¸´à¸™à¸£à¸§à¸¡", async () => {
    mockFetchOnce([]); // à¹„à¸¡à¹ˆà¸¡à¸µ transaction
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    expect(await screen.findByText(/à¹€à¸‡à¸´à¸™à¸£à¸§à¸¡/)).toBeInTheDocument();
  });

  it("à¹à¸ªà¸”à¸‡ state à¸à¸³à¸¥à¸±à¸‡à¹‚à¸«à¸¥à¸”", async () => {
    mockFetchOnce([]); // à¹à¸•à¹ˆà¹€à¸£à¸²à¸ˆà¸°à¸•à¸£à¸§à¸ˆ loading à¸à¹ˆà¸­à¸™
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    expect(screen.getByText(/à¸à¸³à¸¥à¸±à¸‡à¹‚à¸«à¸¥à¸”à¸‚à¹‰à¸­à¸¡à¸¹à¸¥/)).toBeInTheDocument();
  });

  it("à¹à¸ªà¸”à¸‡ error à¹€à¸¡à¸·à¹ˆà¸­ API à¸¥à¹‰à¸¡à¹€à¸«à¸¥à¸§", async () => {
    mockFetchOnce({}, false, 500);
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    expect(await screen.findByText(/à¹‚à¸«à¸¥à¸”à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹„à¸¡à¹ˆà¸ªà¸³à¹€à¸£à¹‡à¸ˆ/)).toBeInTheDocument();
  });

  it("à¹à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¹€à¸¡à¸·à¹ˆà¸­à¹„à¸¡à¹ˆà¸¡à¸µà¸‚à¹‰à¸­à¸¡à¸¹à¸¥", async () => {
    mockFetchOnce([]); // à¹„à¸¡à¹ˆà¸¡à¸µ transaction
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    expect(
      await screen.findByText(/à¸¢à¸±à¸‡à¹„à¸¡à¹ˆà¸¡à¸µà¸£à¸²à¸¢à¸à¸²à¸£à¹ƒà¸™à¹€à¸”à¸·à¸­à¸™à¸™à¸µà¹‰/)
    ).toBeInTheDocument();
  });

  it("à¹à¸ªà¸”à¸‡ transaction à¸¥à¹ˆà¸²à¸ªà¸¸à¸”à¹€à¸¡à¸·à¹ˆà¸­à¸¡à¸µà¸‚à¹‰à¸­à¸¡à¸¹à¸¥", async () => {
    const fakeTx = [
      {
        id: 1,
        type: "INCOME",
        category: "à¹€à¸‡à¸´à¸™à¹€à¸”à¸·à¸­à¸™",
        amount: 5000,
        date: "2025-09-01",
        note: "test",
        iconKey: "Wallet",
      },
    ];
    mockFetchOnce(fakeTx);
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    expect(await screen.findByText(/test/)).toBeInTheDocument();
    expect(screen.getByText(/\+5,000/)).toBeInTheDocument();
  });

  it("à¹€à¸›à¸¥à¸µà¹ˆà¸¢à¸™à¹€à¸”à¸·à¸­à¸™à¸”à¹‰à¸§à¸¢à¸›à¸¸à¹ˆà¸¡ prev/next", async () => {
    mockFetchOnce([]);
    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );
    const prev = screen.getByLabelText("Previous month");
    const next = screen.getByLabelText("Next month");
    fireEvent.click(prev);
    fireEvent.click(next);
    expect(prev).toBeInTheDocument();
    expect(next).toBeInTheDocument();
  });

  it("à¸à¸” More â†’ Delete account à¹€à¸£à¸µà¸¢à¸ confirm", async () => {
    // à¹€à¸•à¸£à¸µà¸¢à¸¡ localStorage
    localStorage.setItem(
      "accounts",
      JSON.stringify([{ name: "TestBank", amount: 1000, iconKey: "bank" }])
    );
    mockFetchOnce([]); // à¹„à¸¡à¹ˆà¸¡à¸µ tx
    vi.spyOn(window, "confirm").mockReturnValue(true);

    render(
      <MemoryRouter>
        <Home />
      </MemoryRouter>
    );

    // à¹€à¸›à¸´à¸”à¹€à¸¡à¸™à¸¹ more
    fireEvent.click(await screen.findByLabelText("More actions"));
    fireEvent.click(screen.getByText("à¸¥à¸š"));
    expect(window.confirm).toHaveBeenCalled();
  });
});



