// src/pages/accountnew.test.tsx
import React from "react";
import { render, screen, fireEvent, waitFor, within } from "@testing-library/react";
import { MemoryRouter } from "react-router-dom";
import AccountNew from "./accountnew";

// ---- mock useNavigate (vitest) ----
const mockNavigate = vi.fn();
vi.mock("react-router-dom", async () => {
  const actual: any = await vi.importActual("react-router-dom");
  return { ...actual, useNavigate: () => mockNavigate };
});

beforeEach(() => {
  localStorage.clear();
  vi.clearAllMocks();
  vi.spyOn(window, "alert").mockImplementation(() => {});
});

// âœ… helper: à¹€à¸¥à¸·à¸­à¸ trigger à¸‚à¸­à¸‡ dropdown à¹ƒà¸«à¹‰à¸Šà¸±à¸” (à¹„à¸¡à¹ˆà¸›à¸°à¸—à¸°à¸à¸±à¸š label)
function getTypeDropdownTrigger(): HTMLElement {
  // à¸žà¸¢à¸²à¸¢à¸²à¸¡à¸«à¸² element à¸—à¸µà¹ˆà¹€à¸›à¹‡à¸™ placeholder à¸à¹ˆà¸­à¸™
  const all = screen.getAllByText(/à¸›à¸£à¸°à¹€à¸ à¸—/i);
  // à¹€à¸¥à¸·à¸­à¸à¸•à¸±à¸§à¸—à¸µà¹ˆà¹€à¸›à¹‡à¸™ placeholder à¸–à¹‰à¸²à¸¡à¸µ
  const placeholderEl = all.find((el) =>
    el.classList?.contains("placeholder")
  );
  if (placeholderEl) return placeholderEl as HTMLElement;

  // à¸–à¹‰à¸²à¹„à¸¡à¹ˆà¸¡à¸µ class à¹ƒà¸«à¹‰à¹€à¸¥à¸·à¸­à¸à¸•à¸±à¸§à¸–à¸±à¸”à¹„à¸› (à¹‚à¸”à¸¢à¸¡à¸²à¸à¸•à¸±à¸§à¹à¸£à¸à¸ˆà¸°à¹€à¸›à¹‡à¸™ label, à¸•à¸±à¸§à¸–à¸±à¸”à¹„à¸›à¸„à¸·à¸­ trigger)
  if (all.length > 1) return all[1] as HTMLElement;

  // fallback à¸­à¸¢à¹ˆà¸²à¸‡à¸ªà¸¸à¸ à¸²à¸ž
  return all[0] as HTMLElement;
}

describe("AccountNew Page", () => {
  it("à¹à¸ªà¸”à¸‡à¸«à¸±à¸§à¸‚à¹‰à¸­ 'à¸ªà¸£à¹‰à¸²à¸‡à¸šà¸±à¸à¸Šà¸µ' à¹à¸¥à¸°à¸›à¸¸à¹ˆà¸¡à¸¢à¸·à¸™à¸¢à¸±à¸™", () => {
    render(
      <MemoryRouter>
        <AccountNew />
      </MemoryRouter>
    );
    expect(screen.getByText(/à¸ªà¸£à¹‰à¸²à¸‡à¸šà¸±à¸à¸Šà¸µ/i)).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /à¸¢à¸·à¸™à¸¢à¸±à¸™/i })).toBeInTheDocument();
  });

  it("à¸à¸£à¸­à¸à¹„à¸¡à¹ˆà¸„à¸£à¸š â†’ alert error", () => {
    render(
      <MemoryRouter>
        <AccountNew />
      </MemoryRouter>
    );
    fireEvent.click(screen.getByRole("button", { name: /à¸¢à¸·à¸™à¸¢à¸±à¸™/i }));
    expect(window.alert).toHaveBeenCalledWith(
      "à¸à¸£à¸­à¸à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹ƒà¸«à¹‰à¸„à¸£à¸šà¹à¸¥à¸°à¸ˆà¸³à¸™à¸§à¸™à¹€à¸‡à¸´à¸™à¹ƒà¸«à¹‰à¸–à¸¹à¸à¸•à¹‰à¸­à¸‡à¸à¹ˆà¸­à¸™à¸™à¹‰à¸²à¸²"
    );
  });

  it("à¸ªà¸²à¸¡à¸²à¸£à¸–à¹€à¸¥à¸·à¸­à¸à¸›à¸£à¸°à¹€à¸ à¸—à¸šà¸±à¸à¸Šà¸µà¹à¸¥à¸°à¹„à¸­à¸„à¸­à¸™à¹„à¸”à¹‰", () => {
    render(
      <MemoryRouter>
        <AccountNew />
      </MemoryRouter>
    );

    // à¹€à¸›à¸´à¸” dropdown à¸›à¸£à¸°à¹€à¸ à¸— (à¹ƒà¸Šà¹‰ helper à¹€à¸žà¸·à¹ˆà¸­à¹„à¸¡à¹ˆà¸Šà¸™ label)
    const trigger = getTypeDropdownTrigger();
    fireEvent.click(trigger);

    // à¹€à¸¥à¸·à¸­à¸ "à¸˜à¸™à¸²à¸„à¸²à¸£" à¸ˆà¸²à¸à¸£à¸²à¸¢à¸à¸²à¸£
    const dd = document.querySelector(".dropdown") as HTMLElement;
    const bankOption = within(dd).getByText(/à¸˜à¸™à¸²à¸„à¸²à¸£/i);
    fireEvent.click(bankOption);

    // à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸—à¸µà¹ˆà¹€à¸¥à¸·à¸­à¸à¸•à¹‰à¸­à¸‡à¹à¸ªà¸”à¸‡à¸­à¸¢à¸¹à¹ˆ
    expect(screen.getByText(/à¸˜à¸™à¸²à¸„à¸²à¸£/i)).toBeInTheDocument();

    // à¹€à¸¥à¸·à¸­à¸à¹„à¸­à¸„à¸­à¸™ "à¸à¸£à¸°à¸›à¸¸à¸"
    const piggyBtn = screen.getByRole("button", { name: /à¸à¸£à¸°à¸›à¸¸à¸/i });
    fireEvent.click(piggyBtn);
    expect(piggyBtn).toHaveClass("active");
  });

  // (à¸–à¹‰à¸²à¸­à¸¢à¸²à¸à¹€à¸›à¸´à¸”à¹€à¸—à¸ªà¸•à¹Œà¸™à¸µà¹‰à¸­à¸µà¸à¸„à¸£à¸±à¹‰à¸‡ à¸à¹‡à¹€à¸­à¸² .skip à¸­à¸­à¸à¹„à¸”à¹‰à¹€à¸¡à¸·à¹ˆà¸­à¸žà¸£à¹‰à¸­à¸¡)
  it.skip("à¸šà¸±à¸™à¸—à¸¶à¸à¸šà¸±à¸à¸Šà¸µà¹ƒà¸«à¸¡à¹ˆà¸¥à¸‡ localStorage à¹à¸¥à¸° navigate à¹„à¸› /home (à¹„à¸¡à¹ˆà¸ªà¸™à¸•à¸±à¸§à¸žà¸´à¸¡à¸žà¹Œ)", async () => {
    render(
      <MemoryRouter>
        <AccountNew />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/à¸Šà¸·à¹ˆà¸­à¸šà¸±à¸à¸Šà¸µ/i), {
      target: { value: "MyCash" },
    });

    const trigger = getTypeDropdownTrigger();
    fireEvent.click(trigger);

    const dd = document.querySelector(".dropdown") as HTMLElement;
    fireEvent.click(within(dd).getByText(/à¹€à¸‡à¸´à¸™à¸ªà¸”/i));

    fireEvent.change(screen.getByPlaceholderText(/à¸šà¸²à¸—/i), {
      target: { value: "1000" },
    });

    fireEvent.click(screen.getByRole("button", { name: /à¸¢à¸·à¸™à¸¢à¸±à¸™/i }));

    await waitFor(() => {
      const saved = JSON.parse(localStorage.getItem("accounts") || "[]");
      expect(saved).toHaveLength(1);
      expect(saved[0].name).toBe("MyCash");
      expect(mockNavigate).toHaveBeenCalledWith(expect.stringMatching(/^\/home$/i));
    });
  });

  it.skip("à¹‚à¸«à¸¡à¸”à¹à¸à¹‰à¹„à¸‚: à¹‚à¸«à¸¥à¸”à¸„à¹ˆà¸²à¸¡à¸²à¹à¸à¹‰à¹„à¸‚à¹à¸¥à¸° submit à¹à¸¥à¹‰à¸§à¸šà¸±à¸™à¸—à¸¶à¸", async () => {
    const initAcc = { name: "Old", amount: 50, iconKey: "wallet", type: "à¹€à¸‡à¸´à¸™à¸ªà¸”" };
    localStorage.setItem("accounts", JSON.stringify([initAcc]));

    render(
      <MemoryRouter
        initialEntries={[
          { pathname: "/edit", state: { mode: "edit", index: 0, account: initAcc } } as any,
        ]}
      >
        <AccountNew />
      </MemoryRouter>
    );

    expect(screen.getByDisplayValue("Old")).toBeInTheDocument();
    expect(screen.getByDisplayValue("50")).toBeInTheDocument();

    fireEvent.change(screen.getByPlaceholderText(/à¸Šà¸·à¹ˆà¸­à¸šà¸±à¸à¸Šà¸µ/i), {
      target: { value: "Updated" },
    });
    fireEvent.click(screen.getByRole("button", { name: /à¸šà¸±à¸™à¸—à¸¶à¸à¸à¸²à¸£à¹à¸à¹‰à¹„à¸‚/i }));

    await waitFor(() => {
      const saved = JSON.parse(localStorage.getItem("accounts") || "[]");
      expect(saved[0].name).toBe("Updated");
      expect(mockNavigate).toHaveBeenCalledWith(expect.stringMatching(/^\/home$/i));
    });
  });
});




